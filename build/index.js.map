{
  "version": 3,
  "sources": ["../build/isNormalNat.js", "../build/index.js"],
  "sourcesContent": ["function parseCandidate(line) {\n  let parts;\n  if (line.indexOf(\"a=candidate:\") === 0) {\n    parts = line.substring(12).split(\" \");\n  } else {\n    parts = line.substring(10).split(\" \");\n  }\n  let relatedAddress = null;\n  let relatedPort = null;\n  let tcpType = null;\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case \"raddr\":\n        relatedAddress = parts[i + 1];\n        break;\n      case \"rport\":\n        relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case \"tcptype\":\n        tcpType = parts[i + 1];\n        break;\n      default:\n        break;\n    }\n  }\n  const candidate = {\n    foundation: parts[0],\n    component: parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    port: parseInt(parts[5], 10),\n    type: parts[7],\n    relatedAddress,\n    relatedPort,\n    tcpType\n  };\n  return candidate;\n}\nexport const isNormalNat = () => new Promise((resolve, reject) => {\n  const candidates = {};\n  const pc = new RTCPeerConnection({\n    iceServers: [\n      {urls: \"stun:stun1.l.google.com:19302\"},\n      {urls: \"stun:stun2.l.google.com:19302\"}\n    ]\n  });\n  pc.createDataChannel(\"foo\");\n  pc.onicecandidate = function(e) {\n    if (e.candidate && e.candidate.candidate.indexOf(\"srflx\") !== -1) {\n      const cand = parseCandidate(e.candidate.candidate);\n      const {relatedPort, port} = cand;\n      if (relatedPort !== null && relatedPort !== void 0) {\n        if (!candidates[relatedPort]) {\n          candidates[relatedPort] = [];\n        }\n        if (port !== null && port !== void 0) {\n          candidates[relatedPort].push(port);\n        }\n      }\n    } else if (!e.candidate) {\n      if (Object.keys(candidates).length === 1) {\n        const ports = candidates[Object.keys(candidates)[0]];\n        resolve(ports.length === 1);\n      }\n    }\n  };\n  pc.createOffer().then((offer) => pc.setLocalDescription(offer));\n});\n", "import {isNormalNat} from \"./isNormalNat.js\";\n(async () => {\n  const isNN = await isNormalNat();\n  const el = document.querySelector(\".nat\");\n  if (el instanceof HTMLElement) {\n    el.innerText = isNN ? \"Normal NAT\" : \"Symmetric NAT\";\n  }\n})();\n"],
  "mappings": "6MAAA,WAAwB,EAAM,CAC5B,GAAI,GACJ,AAAI,EAAK,QAAQ,kBAAoB,EACnC,EAAQ,EAAK,UAAU,IAAI,MAAM,KAEjC,EAAQ,EAAK,UAAU,IAAI,MAAM,KAEnC,GAAI,GAAiB,KACjB,EAAc,KACd,EAAU,KACd,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,GAAK,EACrC,OAAQ,EAAM,QACP,QACH,EAAiB,EAAM,EAAI,GAC3B,UACG,QACH,EAAc,SAAS,EAAM,EAAI,GAAI,IACrC,UACG,UACH,EAAU,EAAM,EAAI,GACpB,cAEA,MAeN,MAZkB,CAChB,WAAY,EAAM,GAClB,UAAW,EAAM,GACjB,SAAU,EAAM,GAAG,cACnB,SAAU,SAAS,EAAM,GAAI,IAC7B,GAAI,EAAM,GACV,KAAM,SAAS,EAAM,GAAI,IACzB,KAAM,EAAM,GACZ,iBACA,cACA,WAIG,GAAM,GAAc,IAAM,GAAI,SAAQ,CAAC,EAAS,IAAW,CAChE,GAAM,GAAa,GACb,EAAK,GAAI,mBAAkB,CAC/B,WAAY,CACV,CAAC,KAAM,iCACP,CAAC,KAAM,oCAGX,EAAG,kBAAkB,OACrB,EAAG,eAAiB,SAAS,EAAG,CAC9B,GAAI,EAAE,WAAa,EAAE,UAAU,UAAU,QAAQ,WAAa,GAAI,CAChE,GAAM,GAAO,EAAe,EAAE,UAAU,WAClC,CAAC,cAAa,QAAQ,EAC5B,AAAI,GAAgB,MACb,GAAW,IACd,GAAW,GAAe,IAExB,GAAS,MACX,EAAW,GAAa,KAAK,YAGxB,CAAC,EAAE,WACR,OAAO,KAAK,GAAY,SAAW,EAAG,CACxC,GAAM,GAAQ,EAAW,OAAO,KAAK,GAAY,IACjD,EAAQ,EAAM,SAAW,KAI/B,EAAG,cAAc,KAAK,AAAC,GAAU,EAAG,oBAAoB,MClE1D,AAAC,KAAY,0BACX,GAAM,GAAO,KAAM,KACb,EAAK,SAAS,cAAc,QAClC,AAAI,YAAc,cAChB,GAAG,UAAY,EAAO,aAAe",
  "names": []
}
